//created on: 10.05.2020.
package sbnz.integracija

import info.debatty.java.stringsimilarity.*;
import sbnz.integracija.example.facts.SearchRequestDTO;
import sbnz.integracija.example.facts.Book;
import sbnz.integracija.example.facts.Tag;
import sbnz.integracija.example.facts.BookTag;
import sbnz.integracija.example.facts.SearchResult;
import sbnz.integracija.example.facts.TagNo;
import java.util.HashMap;
import java.util.Iterator;
import java.lang.Exception;
import java.util.Map;
import java.util.Map.Entry;

query "getSearchResults"
    $result: Book() from entry-point "search"
end

rule "Check-for-special-tags"
agenda-group "startSearch"
auto-focus true
	when 
		$s:SearchRequestDTO() from entry-point "search"
	then
		drools.getEntryPoint("search").insert(new SearchResult($s.getSearchCriteria().size()));
	    System.out.println("old number of tags:" + $s.getSearchCriteria().size());
	    drools.setFocus("tagWeights");
end

rule "Weight-split-author"
agenda-group "tagWeights"
auto-focus true
lock-on-active true
	when 
		$s:SearchRequestDTO(searchCriteria.containsKey("author")) from entry-point "search"
		$sr:SearchResult() from entry-point "search"
	then 
		int newTagNo=$sr.getSearchTagNo()+1; //some tags are worth more
	        	
	    System.out.println("author present");
	    $sr.setSearchTagNo(newTagNo);
	    update($sr);
end

rule "Weight-split-name"
agenda-group "tagWeights"
auto-focus true
lock-on-active true
	when 
		$s:SearchRequestDTO(searchCriteria.containsKey("name")) from entry-point "search"
		$sr:SearchResult() from entry-point "search"
	then
		int newTagNo=$sr.getSearchTagNo()+1; //some tags are worth more
	        	
	    System.out.println("book name present");
	    $sr.setSearchTagNo(newTagNo);
	    update($sr);
end

rule "Weight-split-genre"
agenda-group "tagWeights"
auto-focus true
lock-on-active true
	when 
		$s:SearchRequestDTO(searchCriteria.containsKey("genre")) from entry-point "search"
		$sr:SearchResult() from entry-point "search"
	then
		int newTagNo=$sr.getSearchTagNo()+1; //some tags are worth more
	        	
	    System.out.println("genre present");
	    $sr.setSearchTagNo(newTagNo);
	    update($sr);
end

rule "start-search"
agenda-group "tagWeights"
auto-focus true
salience -1
	when
	then
		System.out.println("starting search");
		drools.setFocus("searchGroup");
		drools.getEntryPoint("search").insert(new Levenshtein());
end


rule "Author-match"
lock-on-active
agenda-group "searchGroup"
    when
     l : Levenshtein() from entry-point "search"
     $sr:SearchResult() from entry-point "search"
     $s:SearchRequestDTO(searchCriteria.containsKey("author")) from entry-point "search"
     $b:Book() from entry-point "search"
     $t:Tag(tagName=="author") from entry-point "search"
     //match the book with its tags, and tags with tag names and names with search req params
     $bt:BookTag(bookId==$b.id && tagKey ==$t.id) from entry-point "search"
    then
    
    String author=(String)$s.getSearchCriteria().get("author");
	int len1=author.length();
	int len2=((String)$bt.getTagValue()).length();
	int longestString=Math.max(len1,len2);
	double match=$b.getMatch();
	$b.setMatch(match+(1-(l.distance( author.toUpperCase(), ((String)$bt.getTagValue()).toUpperCase())/longestString))*200/ $sr.getSearchTagNo());
	update($b);
end

rule "Name-match"
lock-on-active
agenda-group "searchGroup"
    when
     l : Levenshtein() from entry-point "search"
     $sr:SearchResult() from entry-point "search"
     $s:SearchRequestDTO(searchCriteria.containsKey("name")) from entry-point "search"
     $b:Book() from entry-point "search"
     $t:Tag(tagName=="name") from entry-point "search"
    //match the book with its tags, and tags with tag names and names with search req params
    $bt:BookTag(bookId==$b.id && tagKey ==$t.id) from entry-point "search"
    then
    
    String name=(String)$s.getSearchCriteria().get("name").toString();
	int len1=name.length();
	int len2=((String)$bt.getTagValue()).length();
	int longestString=Math.max(len1,len2);
	double match=$b.getMatch();
	$b.setMatch(match+(1-(l.distance( name.toUpperCase(), ((String)$bt.getTagValue()).toUpperCase())/longestString))*200/ $sr.getSearchTagNo());
	update($b);
  
end

rule "Genre-match"
lock-on-active
agenda-group "searchGroup"
    when
     l : Levenshtein() from entry-point "search"
     $sr:SearchResult() from entry-point "search"
     $s:SearchRequestDTO(searchCriteria.containsKey("genre")) from entry-point "search"
     $b:Book() from entry-point "search"
     $t:Tag(tagName=="genre") from entry-point "search"
     $bt:BookTag(bookId==$b.id && tagKey ==$t.id) from entry-point "search"
    then
    
     String genre=(String)$s.getSearchCriteria().get("genre").toString();
	 int len1=genre.length();
	 int len2=((String)$bt.getTagValue()).length();
	 int longestString=Math.max(len1,len2);
	 double match=$b.getMatch();
	 $b.setMatch(match+(1-(l.distance( genre.toUpperCase(),((String)$bt.getTagValue()).toUpperCase())/longestString))*200/ $sr.getSearchTagNo());
	 update($b);


end

rule "String-tags"
lock-on-active
agenda-group "searchGroup"
    when
	     l : Levenshtein() from entry-point "search"
	     $sr:SearchResult() from entry-point "search"
	     SearchRequestDTO($map:searchCriteria) from entry-point "search"
	     $entry : Entry(key!="author" && key!="genre" && key!="name" && this.getValue.class == String.class) from $map.entrySet()
	     $b:Book() from entry-point "search"
	     $t:Tag(tagName==$entry.getKey()) from entry-point "search"
	     //match the book with its tags, and tags with tag names and names with search req params
	     $bt:BookTag(bookId==$b.id && tagKey ==$t.id) from entry-point "search"
    then
    	System.out.println((String)$entry.getValue()+$entry.getKey()+" string tag");		
		int len1=$entry.getValue().toString().length();
		int len2=((String)$bt.getTagValue()).length();
		int longestString=Math.max(len1,len2);
		double match=$b.getMatch();
		$b.setMatch(match+(1-(l.distance(  $entry.getValue().toString().toUpperCase(), ((String)$bt.getTagValue()).toUpperCase())/longestString))*100/ $sr.getSearchTagNo());
	 	update($b);
end


rule "Number-tags"
lock-on-active
agenda-group "searchGroup"
    when
         l : Levenshtein() from entry-point "search"
	     $sr:SearchResult() from entry-point "search"
	     SearchRequestDTO($map:searchCriteria) from entry-point "search"
	     $entry : Entry(key!="author" && key!="genre" && key!="name" && this.getValue.class == Integer.class) from $map.entrySet()
	     $b:Book() from entry-point "search"
	     $t:Tag(tagName==$entry.getKey()) from entry-point "search"
	     //match the book with its tags, and tags with tag names and names with search req params
	     $bt:BookTag(bookId==$b.id && tagKey ==$t.id) from entry-point "search"
	     //$entry.getValue().class == Integer.class
    then
    	System.out.println($entry.getKey()+" number tag");		
		double match=$b.getMatch();
		$b.setMatch(match+java.lang.Math.max((100-java.lang.Math.abs((Integer)$entry.getValue()- (Integer.parseInt((String)$bt.getTagValue())))),0));
	 	update($b);	
end

//TODO

rule "List-tags"
lock-on-active
agenda-group "searchGroup"
    when
	     l : Levenshtein() from entry-point "search"
	     $sr:SearchResult() from entry-point "search"
	     SearchRequestDTO($map:searchCriteria) from entry-point "search"
	     $entry : Entry(key!="author" && key!="genre" && key!="name" && this.getValue.class == Object.class) from $map.entrySet()
	     $b:Book() from entry-point "search"
	     $t:Tag(tagName==$entry.getKey()) from entry-point "search"
	     //match the book with its tags, and tags with tag names and names with search req params
	     $bt:BookTag(bookId==$b.id && tagKey ==$t.id) from entry-point "search"
    then
		//List<String> list=(List<String>)$entry.getValue();
		System.out.println($entry.getValue());
end

