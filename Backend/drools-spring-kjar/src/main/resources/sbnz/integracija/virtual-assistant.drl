//created on: 10.05.2020.
package sbnz.integracija

//list any import classes here.
import info.debatty.java.stringsimilarity.*;
import sbnz.integracija.example.facts.SearchRequestDTO;
import sbnz.integracija.example.facts.Book;
import sbnz.integracija.example.facts.Tag;
import sbnz.integracija.example.facts.BookTag;
import sbnz.integracija.example.facts.SearchResult;
import sbnz.integracija.example.facts.TransactionEvent;
import java.util.HashMap;
import java.util.Iterator;
import java.lang.Exception;

//declare any global variables here

declare MembershipPaidEvent
    @role(event)
    userId: Long
    reason: String
end

rule "Weight-split"
auto-focus true
	 salience 10
	when 
		$s:SearchRequestDTO()
	then
		int tagNo=$s.getSearchCriteria().size();
		 System.out.println("number of search tags: "+tagNo);
		 Iterator it = $s.getSearchCriteria().entrySet().iterator();
	    while (it.hasNext()) {
	        HashMap.Entry pair = (HashMap.Entry)it.next();
	        
	        	if(pair.getKey().equals("author")){
	        		 tagNo= tagNo+1; //some tags are worth more
	        	}
	        	if(pair.getKey().equals("name")){
	        		 tagNo= tagNo+1; //some tags are worth more
	        	}
	        	if(pair.getKey().equals("genre")){
	        		 tagNo= tagNo+1; //some tags are worth more
	        	}
	    }
	    System.out.println(" new number of search tags: "+tagNo);
	    insert (new SearchResult(tagNo));
	     drools.setFocus("search");
end

rule "Author-match"
salience 9
lock-on-active
agenda-group "search"
    when
     $sr:SearchResult()
     $s:SearchRequestDTO()
     $b:Book()
     $t:Tag()
     $bt:BookTag()
    then
   
    Levenshtein l = new Levenshtein();
    
  
    
    //match the book with its tags, and tags with tag names and names with search req params
    if($b.getId()==$bt.getBookId() && $bt.getTagKey()==$t.getId()){
    	 Iterator it = $s.getSearchCriteria().entrySet().iterator();
	    while (it.hasNext()) {
	        HashMap.Entry pair = (HashMap.Entry)it.next();
	        if(pair.getKey().equals($t.getTagName())){     //only compare the same tags
	        	if(pair.getKey().equals("author")){
	        	
	        	 //System.out.println(pair.getKey());
   				 System.out.println($t.getTagName());
	        	
	        		int len1=pair.getValue().toString().length();
	        		int len2=$bt.getTagValue().length();
	        		int longestString=Math.max(len1,len2);
	        		 System.out.println((1-(l.distance( pair.getValue().toString(), $bt.getTagValue())/longestString))*200/ $sr.getSearchTagNo()); 
	        		 double match=$b.getMatch();
	        		 $b.setMatch(match+(1-(l.distance( pair.getValue().toString(), $bt.getTagValue())/longestString))*200/ $sr.getSearchTagNo());
	        		 update($b);
	        		 break;
	        	}
	         }
	    }
    }
    

end

rule "Name-match"
salience 8
lock-on-active
agenda-group "search"
    when
    $sr:SearchResult()
     $s:SearchRequestDTO()
     $b:Book()
     $t:Tag()
     $bt:BookTag()
    then
   
    Levenshtein l = new Levenshtein();
    int tagNo=$s.getSearchCriteria().size();
    
    //match the book with its tags, and tags with tag names and names with search req params
    if($b.getId()==$bt.getBookId() && $bt.getTagKey()==$t.getId()){
    	 Iterator it = $s.getSearchCriteria().entrySet().iterator();
	    while (it.hasNext()) {
	        HashMap.Entry pair = (HashMap.Entry)it.next();
	        if(pair.getKey().equals($t.getTagName())){     //only compare the same tags
	        	if(pair.getKey().equals("name")){
	        		int len1=pair.getValue().toString().length();
	        		int len2=$bt.getTagValue().length();
	        		int longestString=Math.max(len1,len2);
	        		 System.out.println((1-(l.distance( pair.getValue().toString(), $bt.getTagValue())/longestString))*200/ $sr.getSearchTagNo());
	        		  double match=$b.getMatch();
	        		 $b.setMatch(match+(1-(l.distance( pair.getValue().toString(), $bt.getTagValue())/longestString))*200/ $sr.getSearchTagNo());
	        		 update($b);
	        		 break; 
	        	}

	         }
	    }
    }
    

end

rule "Genre-match"
salience 7
lock-on-active
agenda-group "search"
    when
    $sr:SearchResult()
     $s:SearchRequestDTO()
     $b:Book()
     $t:Tag()
     $bt:BookTag()
    then
   
    Levenshtein l = new Levenshtein();
    int tagNo=$s.getSearchCriteria().size();
    
    //match the book with its tags, and tags with tag names and names with search req params
    if($b.getId()==$bt.getBookId() && $bt.getTagKey()==$t.getId()){
    	 Iterator it = $s.getSearchCriteria().entrySet().iterator();
	    while (it.hasNext()) {
	        HashMap.Entry pair = (HashMap.Entry)it.next();
	        if(pair.getKey().equals($t.getTagName())){     //only compare the same tags
	        
	        	if(pair.getKey().equals("genre")){
	        		int len1=pair.getValue().toString().length();
	        		int len2=$bt.getTagValue().length();
	        		int longestString=Math.max(len1,len2);
	        		 System.out.println((1-(l.distance( pair.getValue().toString(), $bt.getTagValue())/longestString))*200/ $sr.getSearchTagNo());
	        		  double match=$b.getMatch();
	        		 $b.setMatch(match+(1-(l.distance( pair.getValue().toString(), $bt.getTagValue())/longestString))*200/ $sr.getSearchTagNo());
	        		 update($b);
	        		 break; 
	        	}

	         }
	    }
    }
    

end


rule "String-tags"
salience 6
lock-on-active
agenda-group "search"

    when
    $sr:SearchResult()
     $s:SearchRequestDTO()
     $b:Book()
     $t:Tag()
     $bt:BookTag()
    then
   
    Levenshtein l = new Levenshtein();
    int tagNo=$s.getSearchCriteria().size();
    
    //match the book with its tags, and tags with tag names and names with search req params
    if($b.getId()==$bt.getBookId() && $bt.getTagKey()==$t.getId()){
    	 Iterator it = $s.getSearchCriteria().entrySet().iterator();
	    while (it.hasNext()) {
	        HashMap.Entry pair = (HashMap.Entry)it.next();
	        if(pair.getKey().equals($t.getTagName())){     //only compare the same tags
		        if(!(pair.getKey().equals("name") || pair.getKey().equals("author") || pair.getKey().equals("genre"))){
		        System.out.println( pair.getValue().toString()+" "+ $bt.getTagValue());
		        	try{
		        		Integer.parseInt( pair.getValue().toString());}
		        		catch(Exception e){
		        		int len1=pair.getValue().toString().length();
		        		int len2=$bt.getTagValue().length();
		        		int longestString=Math.max(len1,len2);
		        		System.out.println(l.distance( pair.getValue().toString(), $bt.getTagValue()));
		        		 System.out.println((1-(l.distance( pair.getValue().toString(), $bt.getTagValue())/longestString))*100/ $sr.getSearchTagNo());
		        		  double match=$b.getMatch();
	        			  $b.setMatch(match+(1-(l.distance( pair.getValue().toString(), $bt.getTagValue())/longestString))*100/ $sr.getSearchTagNo());
	        		 	  update($b);
		        		 } 
		        	}
		    }
	    }
    }
    

end

rule "Membership-expired"
    when
        not(
            TransactionEvent($uId: userId) 
            over window:time(5s)
        )
    then
        System.out.println("expired for " + $uId);
        
end
